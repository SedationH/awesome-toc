{"mappings":"AEMA,uBAAgB,QAAQ,EAAE,CAAA;AAM1B;IACE,IAAI,EAAE,QAAQ,CAAA;IACd,YAAY,CAAC,EAAE,MAAM,EAAE,CAAA;IACvB,YAAY,CAAC,EAAE,MAAM,EAAE,CAAA;IACvB,mBAAmB,CAAC,EAAE,MAAM,EAAE,CAAA;IAC9B,mBAAmB,CAAC,EAAE,MAAM,EAAE,CAAA;IAC9B,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,UAAU,EAAE;;KAAA,KAAK,IAAI,CAAA;IACvD,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,UAAU,EAAE;;KAAA,KAAK,IAAI,CAAA;CACxD;AAED,wBAAS,IAAI,CAAC,EACZ,IAAS,EACT,YAAY,EAAE,qBAAqB,EACnC,YAAY,EAAE,qBAAqB,EACnC,mBAAwB,EACxB,mBAAwB,EACxB,QAAQ,EACR,QAAQ,GACT,EAAE,SAAS,eA8EX;AAED;IACE,GAAG,EAAE,MAAM,CAAA;IACX,KAAK,EAAE,MAAM,CAAA;IACb,QAAQ,CAAC,EAAE,QAAQ,EAAE,CAAA;CACtB;AAgFD,eAAe,IAAI,CAAA","sources":["src/src/debug.ts","src/src/HasChildrenIcon.tsx","src/src/Tree.tsx","src/Tree.tsx"],"sourcesContent":[null,null,null,"import React, { useEffect, useState } from \"react\"\nimport classnames from \"classnames\"\nimport { log } from \"./debug\"\nimport HasChildrenIcon from \"./HasChildrenIcon\"\nimport * as style from \"./style.module.less\"\n\ntype TreeData = NodeData[]\n\nfunction deleteKeyFromArray(key: string, array: string[]) {\n  return array.filter((keyFromArray) => keyFromArray !== key)\n}\n\ninterface TreeProps {\n  data: TreeData\n  selectedKeys?: string[]\n  expandedKeys?: string[]\n  defaultExpandedKeys?: string[]\n  defaultSelectedKeys?: string[]\n  onSelect?: (keys: string[], { node: NodeData }) => void\n  onExpand?: (keys: string[], { node: NodeData }) => void\n}\n\nfunction Tree({\n  data = [],\n  selectedKeys: selectedKeysFromProps,\n  expandedKeys: expandedKeysFromProps,\n  defaultExpandedKeys = [],\n  defaultSelectedKeys = [],\n  onSelect,\n  onExpand,\n}: TreeProps) {\n  const [selectedKeys, setSelectedKeys] = useState(\n    selectedKeysFromProps || defaultSelectedKeys\n  )\n  const [expandedKeys, setExpandedKeys] = useState(\n    expandedKeysFromProps || defaultExpandedKeys\n  )\n\n  useEffect(() => {\n    // 处理 selectedKeysFromProps 的 变化\n    // 也要防止第一次变为 undefined\n    selectedKeysFromProps && setSelectedKeys(selectedKeysFromProps)\n    log(\"selectedKeysFromProps useEffect\", {\n      expandedKeysFromProps,\n      selectedKeys,\n    })\n  }, [selectedKeysFromProps])\n\n  useEffect(() => {\n    // 处理 expandedKeysFromProps 的 变化\n    // 也要防止第一次变为 undefined\n    expandedKeysFromProps && setExpandedKeys(expandedKeysFromProps)\n    log(\"expandedKeysFromProps useEffect\", {\n      expandedKeysFromProps,\n      expandedKeys,\n    })\n  }, [expandedKeysFromProps])\n\n  const onTreeSelect: (\n    key: string,\n    { selected: bool, node: NodeData }\n  ) => void = (key, { selected, node }) => {\n    const keys = selected\n      ? selectedKeys.concat(key)\n      : deleteKeyFromArray(key, selectedKeys)\n    onSelect?.(keys, { node })\n\n    log(\"onTreeSelect\", keys)\n\n    // 如果外界没有传入 selectedKeysFromProps 状态需要自己维护\n    if (!selectedKeysFromProps) {\n      setSelectedKeys(keys)\n    }\n  }\n\n  const onTreeExpand: (\n    key: string,\n    { expanded: bool, node: NodeData }\n  ) => void = (key, { expanded, node }) => {\n    const keys = expanded\n      ? expandedKeys.concat(key)\n      : deleteKeyFromArray(key, expandedKeys)\n    onExpand?.(keys, { node })\n\n    log(\"onTreeExpand\", keys)\n\n    // 如果外界没有传入 expandedKeysFromProps 状态需要自己维护\n    if (!expandedKeysFromProps) {\n      setExpandedKeys(keys)\n    }\n  }\n\n  log(\"Tree render\", { selectedKeys, expandedKeys })\n\n  return (\n    <div className={style.tree}>\n      {data.map((nodeData) => (\n        <TreeNode\n          key={nodeData.key}\n          data={nodeData}\n          selectedKeys={selectedKeys}\n          expandedKeys={expandedKeys}\n          onSelect={onTreeSelect}\n          onExpand={onTreeExpand}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport interface NodeData {\n  key: string\n  title: string\n  children?: NodeData[]\n}\n\ninterface TreeNodeProps {\n  data: NodeData\n  selectedKeys: string[]\n  expandedKeys: string[]\n  onSelect: (key: string, { selected: bool, node: NodeData }) => void\n  onExpand: (key: string, { expanded: bool, node: NodeData }) => void\n}\n\nfunction TreeNode({\n  data,\n  selectedKeys,\n  expandedKeys,\n  onSelect,\n  onExpand,\n}: TreeNodeProps) {\n  const hasChildren = data.children?.length ? true : false\n  const selected = selectedKeys?.includes(data.key)\n  const expanded = expandedKeys?.includes(data.key)\n\n  const onNodeSelect = () => {\n    log(\"onNodeSelect\", { selected: !expanded, data, key: data.key })\n    onSelect(data.key, {\n      selected: !selected,\n      node: data,\n    })\n  }\n\n  const onNodeExpand = () => {\n    log(\"onNodeExpand\", { expanded: !expanded, data, key: data.key })\n    onExpand(data.key, {\n      expanded: !expanded,\n      node: data,\n    })\n  }\n\n  return (\n    <div className={style[\"tree-node\"]}>\n      <div className={style[\"content\"]}>\n        {hasChildren ? (\n          <div onClick={onNodeExpand} className={style[\"switcher\"]}>\n            <HasChildrenIcon\n              className={classnames(style[\"switcher-icon\"], {\n                [style[\"expanded\"]]: expanded,\n              })}\n            />\n          </div>\n        ) : (\n          <div className={style[\"switcher-placeholder\"]}></div>\n        )}\n        <div\n          className={classnames(style[\"title-wrapper\"], {\n            [style[\"selected\"]]: selected,\n          })}\n          onClick={onNodeSelect}\n        >\n          <span>{data.title}</span>\n        </div>\n      </div>\n      <div\n        className={classnames(style[\"children-wrapper\"], {\n          [style[\"expanded\"]]: expanded,\n        })}\n      >\n        {data.children.map((nodeData) => (\n          <TreeNode\n            data={nodeData}\n            key={nodeData.key}\n            selectedKeys={selectedKeys}\n            expandedKeys={expandedKeys}\n            onSelect={onSelect}\n            onExpand={onExpand}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Tree\nexport { TreeData }\n"],"names":[],"version":3,"file":"types.d.ts.map"}